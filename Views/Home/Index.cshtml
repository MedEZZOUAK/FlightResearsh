@{
    ViewData["Title"] = "Flight Search";
}

<!-- Add Font Awesome -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<script src='https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.16.1/lodash.min.js'></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.0/jquery.min.js'></script>
<script src='https://unpkg.com/fuse.js@2.5.0/src/fuse.min.js'></script>
<script src='https://screenfeedcontent.blob.core.windows.net/html/airports.js'></script>

<style>
    .search-container {
        background: linear-gradient(135deg, #6e8efb, #4a6cf7);
        padding: 2rem 0;
        border-radius: 15px;
        margin-bottom: 2rem;
    }

    .card {
        border: none;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
        transition: transform 0.2s;
    }

    .card:hover {
        transform: translateY(-5px);
    }

    .input-with-icon {
        position: relative;
    }

    .input-with-icon i {
        position: absolute;
        left: 10px;
        top: 50%;
        transform: translateY(-50%);
        color: #4a6cf7;
    }

    .input-with-icon input,
    .input-with-icon select {
        padding-left: 35px;
    }

    .flight-card {
        background: #fff;
        margin: 1rem 0;
    }

    .flight-price {
        font-size: 1.5rem;
        color: #4a6cf7;
        font-weight: bold;
    }

    .loading {
        display: none;
        text-align: center;
        padding: 2rem;
    }

    .btn-primary {
        background: #4a6cf7;
        border: none;
        padding: 0.8rem 2rem;
        font-weight: 600;
    }

    .flight-info {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    .autocomplete-wrapper {
        position: relative;
    }
    
    .autocomplete-results {
        position: absolute;
        background: white;
        z-index: 1000;
        width: 100%;
        max-height: 400px;
        overflow-y: auto;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        border-radius: 4px;
    }
    
    .autocomplete-result {
        padding: 12px;
        border-bottom: 1px solid #f3f3f3;
        cursor: pointer;
    }
    
    .autocomplete-result:hover {
        background: #f3f3f3;
    }
    
    .autocomplete-location {
        color: #999;
        font-size: 13px;
    }
    
    .autocomplete-results[data-highlight='0'] > :nth-child(1) {
        background: #f3f3f3;
    }
    
    .autocomplete-results[data-highlight='1'] > :nth-child(2) {
        background: #f3f3f3;
    }
    
    .autocomplete-results[data-highlight='2'] > :nth-child(3) {
        background: #f3f3f3;
    }
    .banner{
        display:none;
        position:fixed;
        z-index:3;
        top:50%;
        width:50%;
        left:50%;
        transform: translate(-50%, -50%);
        background-color:white;
        border:solid 1px black;
        border-radius:25px;
        padding:10px;
    }
    .banner .header{
        display:flex;
        align-items:center;
        justify-content:space-between;
    }
    .banner .header h1{
        text-align:center;
        padding-top:15px;
        width:100%;
        color:#4a6cf7;
    }
    .banner h2{
        text-align:center;
        padding-top:15px;
        width:100%;
        margin-bottom:20px;
    }
    .banner .oneTragectory{
        margin-bottom:10px;
        display:flex;
        justify:space-around;
        align-items:center;
        border:solid 1px gray;
        width:90%;
        margin-left:5%;
        border-radius:10px;
        padding:5px;
        background-color:lightgray;
        padding:10px;
    }
    .banner .oneTragectory .positions{
        flex: 0 0 45%;
        display:flex;
        align-items:center;
        justify-content:space-around;
    }
    .banner .oneTragectory .positions p{
        flex: 0 0 30%;
    }
    .banner .oneTragectory .times {
        text-align:center;
        flex:0 0 45%;
    }
    #eye{
        padding:10px;
        border-radius:5px;
        background-color:#4a6cf7;
        color:white;
        width:fit-content;
    }
</style>

<div class="container mt-4" style="position:relative">
    <div class="banner" id="banner">
        <div class="header">
            <h1><i class="fa fa-info-circle" style="padding-right:15px" aria-hidden="true"></i>Details</h1>
        </div>
        <div class="Tragectories" id="tragects">
            <h2>Trajectory : </h2>
            <div style="max-height:55vh;overflow:scroll"  id="tragectoryContainer">

            </div>
        </div>
        <div class="btnContainer" style="float:right;margin-left:5%;margin-top:15px">
            <button class="btn btn-primary w-90 ml-5" onclick="closeBanner()">
                Close
            </button>
        </div>
    </div>
    <div class="search-container">
        <div class="card">
            <div class="card-body">
                <h2 class="card-title text-center mb-4"><i class="fas fa-plane"></i> Flight Search</h2>
                <form id="flightSearchForm">
                    <div class="row">
                        <div class="col-md-12 mb-3">
                            <div class="btn-group w-100" role="group">
                                <input type="radio" class="btn-check" name="flightType" id="roundTrip"
                                    value="round-trip" checked>
                                <label class="btn btn-outline-primary" for="roundTrip">
                                    <i class="fas fa-exchange-alt"></i> Round Trip
                                </label>
                                <input type="radio" class="btn-check" name="flightType" id="oneWay" value="one-way">
                                <label class="btn btn-outline-primary" for="oneWay">
                                    <i class="fas fa-long-arrow-alt-right"></i> One Way
                                </label>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label><i class="fas fa-plane-departure"></i> From</label>
                            <div class="input-with-icon">
                                <i class="fas fa-map-marker-alt"></i>
                                <input type="text" class="form-control" id="departureCity" autocomplete="off" required>
                            </div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label><i class="fas fa-plane-arrival"></i> To</label>
                            <div class="input-with-icon">
                                <i class="fas fa-map-marker-alt"></i>
                                <input type="text" class="form-control" id="arrivalCity" autocomplete="off" required>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label><i class="far fa-calendar-alt"></i> Departure Date</label>
                            <div class="input-with-icon">
                                <i class="fas fa-calendar"></i>
                                <input type="date" class="form-control" id="departureDate" required>
                            </div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label><i class="far fa-calendar-alt"></i> Return Date</label>
                            <div class="input-with-icon">
                                <i class="fas fa-calendar"></i>
                                <input type="date" class="form-control" id="returnDate">
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label><i class="fas fa-users"></i> Passengers</label>
                            <div class="input-with-icon">
                                <i class="fas fa-user"></i>
                                <input type="number" class="form-control" id="passengers" min="1" value="1" required>
                            </div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label><i class="fas fa-chair"></i> Class</label>
                            <div class="input-with-icon">
                                <i class="fas fa-level-up-alt"></i>
                                <select class="form-control" id="class">
                                    <option value="ECONOMY">Economy</option>
                                    <option value="BUSINESS">Business</option>
                                    <option value="FIRST">First</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <button type="submit" class="btn btn-primary w-100">
                        <i class="fas fa-search"></i> Search Flights
                    </button>
                </form>
            </div>
        </div>
    </div>

    <div id="loading" class="loading">
        <i class="fas fa-spinner fa-spin fa-3x"></i>
        <p>Searching for the best flights...</p>
    </div>

    <div id="searchResults" class="mt-4" style="display: none;">
        <div class="card">
            <div class="card-body">
                <div class="row mb-3" style="align-items:center">
                    <div class="col-md-6">
                        <div class="input-with-icon">
                            <i class="fas fa-sort"></i>
                            <select id="sortOption" class="form-control">
                                <option value="price">Sort by Price</option>
                                <option value="duration">Sort by Duration</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" id="directFlights">
                            <label class="form-check-label">
                                <i class="fas fa-direct"></i> Direct flights only
                            </label>
                        </div>
                    </div>
                </div>
                <div id="flightsList"></div>
            </div>
        </div>
    </div>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const airlines = {};
        //get the airlines json 
        fetch('https://raw.githubusercontent.com/npow/airline-codes/refs/heads/master/airlines.json')
            .then(response => response.json())
            .then(data => {
                // Get the count of airlines
                const airlinesCount = data.length;
                // Optional: Log to console for debugging
                console.log(`Found ${airlinesCount} airlines`);

                data.forEach(airline => {
                    if (airline.iata) {
                        airlines[airline.iata] = airline.name;
                    }
                });
            })
            .catch(error => {
                console.error('Error fetching airlines data:', error);
            });
        //create a dictionary to store the airlines name and iata if iata is null skip 
        console.log(airlines);
        const form = document.getElementById('flightSearchForm');
        const searchResults = document.getElementById('searchResults');
        const sortOption = document.getElementById('sortOption');
        const directFlightsCheck = document.getElementById('directFlights');
        let currentFlights = [];
        // Hide return date when one-way is selected
        document.querySelectorAll('input[name="flightType"]').forEach(radio => {
            radio.addEventListener('change', function () {
                const returnDateField = document.getElementById('returnDate');
                returnDateField.required = this.value === 'round-trip';
                returnDateField.parentElement.style.display = this.value === 'round-trip' ? 'block' : 'none';
            });
        });

        form.addEventListener('submit', async function (e) {
            e.preventDefault();
            document.getElementById('loading').style.display = 'block';
            searchResults.style.display = 'none';

            const searchData = {
                departureCity: document.getElementById('departureCity').value,
                arrivalCity: document.getElementById('arrivalCity').value,
                departureDate: document.getElementById('departureDate').value,
                returnDate: document.getElementById('returnDate').value,
                passengers: document.getElementById('passengers').value,
                class: document.getElementById('class').value,
                flightType: document.querySelector('input[name="flightType"]:checked').value
            };

            try {
                const response = await fetch('/Home/SearchFlights', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(searchData)
                });

                currentFlights = await response.json();
                console.log(currentFlights);
                
                displayFlights(currentFlights);
                searchResults.style.display = 'block';
            } catch (error) {
                console.error('Error:', error);
            }
            document.getElementById('loading').style.display = 'none';
            searchResults.style.display = 'block';
        });
        window.closeBanner=function(){
            document.getElementById("banner").style.display = "none";
        }
        window.showBanner=function(segments){
           if (typeof segments === 'string') {
                segments = JSON.parse(segments);
            }

            let content = ""; 

            segments.forEach(segment => {
                if (typeof segment === 'string') {
                    segment = JSON.parse(segment);
                }
                function formatDate(dateString) {
                    const d = new Date(dateString);
                    const day = String(d.getDate()).padStart(2, '0');  // Ensure two digits
                    const month = String(d.getMonth() + 1).padStart(2, '0');  // Month is 0-indexed, so add 1
                    const year = d.getFullYear();
                    const hours = String(d.getHours()).padStart(2, '0');
                    const minutes = String(d.getMinutes()).padStart(2, '0');
                    return `${day}/${month}/${year} ${hours}:${minutes}`;
                }
                console.log(segment.departureDate);
                
                const departureTime = formatDate(segment.departureDate);
                const arrivalTime = formatDate(segment.arrivalDate);
                content += `
                    <div class='oneTragectory'>
                        <div class='positions'>
                            <p><i class="fas fa-plane-departure text-primary"></i> ${segment.departureSegment}</p>
                            <p><i class="fa fa-arrow-right" text-primary" aria-hidden="true"></i></p>
                            <p><i class="fas fa-plane-arrival text-primary"></i> ${segment.arrivalSegment}</p>
                        </div>
                        <div class='times'>
                            <p ><i class="fas fa-clock text-primary"></i> <span style="font-weight:bold">Departure:</span> <br/>${departureTime}</p>
                            <p ><i class="fas fa-clock text-primary"></i> <span style="font-weight:bold">Arrival:</span> <br/>${arrivalTime}</p>
                        </div>
                    </div>`;
            });

            document.getElementById('tragectoryContainer').innerHTML = content;
            document.getElementById("banner").style.display = "block";
        }

        function displayFlights(flights) {
            const flightsList = document.getElementById('flightsList');
            flightsList.innerHTML = '';

            flights.forEach(flight => {
                const arrivalTime = new Date(flight.arrivalDateTime);
                const departureTime = new Date(flight.departureDateTime);
                const durationMs = arrivalTime - departureTime;
                
                const hours = Math.floor(durationMs / (1000 * 60 * 60));
                const minutes = Math.floor((durationMs % (1000 * 60 * 60)) / (1000 * 60));

                const flightCard = document.createElement('div');
                flightCard.className = 'card flight-card mb-3';
                flightCard.innerHTML = `
            <div class="card-body">
                <div class="row align-items-center">
                    <div class="col-md-3">
                        <div class="flight-price">
                            <i class="fas fa-tag"></i> €${parseFloat(flight.price).toFixed(2)}
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="flight-info">
                            <i class="fas fa-plane-departure text-primary"></i>
                            <div>
                                <small style="font-weight:bold">Departure</small>
                                <p class="mb-0">${new Date(flight.departureDateTime).toLocaleString()}</p>
                            </div>
                        </div>
                        <div class="flight-info mt-2">
                            <i class="fas fa-plane"></i>
                            <div>
                                <small style="font-weight:bold">Carrier</small>
                                                                <p class="mb-0">${airlines[flight.carrierCode] || flight.carrierCode}</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="flight-info">
                            <i class="fas fa-plane-arrival text-primary"></i>
                            <div>
                                <small style="font-weight:bold">Arrival</small>
                                <p class="mb-0">${new Date(flight.arrivalDateTime).toLocaleString()}</p>
                            </div>
                        </div>
                        <div class="flight-info mt-2">
                            <i class="fas fa-clock text-primary"></i>
                            <div>
                                <small style="font-weight:bold">Duration</small>
                                <p class="mb-0">${hours}h ${minutes}m</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="flight-info">
                            <i class="fas fa-map-marker-alt text-primary"></i>
                            <div>
                                <small style="font-weight:bold">Stops</small>
                                <p class="mb-0">${flight.numberOfStops === 0 ? 'Direct' : flight.numberOfStops + ' stops'}</p>
                            </div>
                        </div>
                        <div class="amenities mt-2"  id="eye" onclick='showBanner(${JSON.stringify(flight.segments)})'>
                            <i class="fa fa-eye" aria-hidden="true"></i>
                        </div>
                    </div>
                </div>
            </div>
        `;
                flightsList.appendChild(flightCard);
            });
        }
        
        sortOption.addEventListener('change', function () {
            const sortedFlights = [...currentFlights].sort((a, b) => {
                if (this.value === 'price') {
                    return parseFloat(a.price) - parseFloat(b.price);
                } else {
                    const aDuration = new Date(a.arrivalDateTime) - new Date(a.departureDateTime);
                    const bDuration = new Date(b.arrivalDateTime) - new Date(b.departureDateTime);
                    return aDuration - bDuration;
                }
            });
            displayFlights(sortedFlights);
        });

        directFlightsCheck.addEventListener('change', function () {
            const filteredFlights = currentFlights.filter(flight =>
                !this.checked || flight.numberOfStops === 0
            );
            displayFlights(filteredFlights);
        });
        initializeAutocomplete('#departureCity');
        initializeAutocomplete('#arrivalCity');
        function initializeAutocomplete(selector) {
            var options = {
                shouldSort: true,
                threshold: 0.4,
                maxPatternLength: 32,
                keys: [{
                    name: 'iata',
                    weight: 0.5
                }, {
                    name: 'name',
                    weight: 0.3
                }, {
                    name: 'city',
                    weight: 0.2
                }]
            };

            var fuse = new Fuse(airports, options);
            var ac = $(selector);
            var results = [];
            var numResults = 0;
            var selectedIndex = -1;

            // Create wrapper and results list
            var wrap = $('<div>')
                .addClass('autocomplete-wrapper')
                .insertBefore(ac)
                .append(ac);

            var list = $('<div>')
                .addClass('autocomplete-results')
                .appendTo(wrap);

            // Bind events
            ac.on('click', function (e) {
                e.stopPropagation();
            })
                .on('focus keyup', search)
                .on('keydown', onKeyDown);

            list.on('click', '.autocomplete-result', function (e) {
                e.preventDefault();
                e.stopPropagation();
                selectIndex($(this).data('index'));
            });

            $(document)
                .on('mouseover', '.autocomplete-result', function (e) {
                    var index = parseInt($(this).data('index'), 10);
                    if (!isNaN(index)) {
                        list.attr('data-highlight', index);
                    }
                })
                .on('click', clearResults);

            function clearResults() {
                results = [];
                numResults = 0;
                list.empty();
            }

            function selectIndex(index) {
                if (results.length >= index + 1) {
                    ac.val(results[index].iata);
                    clearResults();
                }
            }

            function search(e) {
                if (e.which === 38 || e.which === 13 || e.which === 40) {
                    return;
                }

                if (ac.val().length > 0) {
                    results = _.take(fuse.search(ac.val()), 7);
                    numResults = results.length;

                    var divs = results.map(function (r, i) {
                        return '<div class="autocomplete-result" data-index="' + i + '">'
                            + '<div><b>' + r.iata + '</b> - ' + r.name + '</div>'
                            + '<div class="autocomplete-location">' + r.city + ', ' + r.country + '</div>'
                            + '</div>';
                    });

                    selectedIndex = -1;
                    list.html(divs.join(''))
                        .attr('data-highlight', selectedIndex);
                } else {
                    numResults = 0;
                    list.empty();
                }
            }

            function onKeyDown(e) {
                switch (e.which) {
                    case 38: // up
                        selectedIndex--;
                        if (selectedIndex <= -1) {
                            selectedIndex = -1;
                        }
                        list.attr('data-highlight', selectedIndex);
                        break;
                    case 13: // enter
                        selectIndex(selectedIndex);
                        break;
                    case 9: // tab
                        selectIndex(selectedIndex);
                        e.stopPropagation();
                        return;
                    case 40: // down
                        selectedIndex++;
                        if (selectedIndex >= numResults) {
                            selectedIndex = numResults - 1;
                        }
                        list.attr('data-highlight', selectedIndex);
                        break;
                    default:
                        return;
                }
                e.stopPropagation();
                e.preventDefault();
            }
        }
    });
</script>